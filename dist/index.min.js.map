//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["now","performance","Date","BenchmarkError","Error","code","message","name","statusCode","constructor","super","this","Errors","BeforeEachError","AfterEachError","RunError","AfterError","BeforeError","FatalError","CompareBy","CompareBy2","getError","error","type","benchmarkError","stack","i","hasOwnProperty","isAsync","fn","async","runCallback","instance","errorTypeIfAny","callback","args","bind","_Benchmark","cycles","samples","hz","meanTime","medianTime","standardDeviation","maxTime","minTime","times","options","stamp","runTime","totalTime","optionsOrFn","opts","defaults","toJSON","errorMessage","compareWith","other","compareBy","Math","trunc","beforeEach","afterEach","startTime","startCycleTime","BeforeEachError2","time","start","push","AfterEachError2","minSamples","after","before","onError","maxTimeInMilliseconds","beforeError","runSample","length","sort","a","b","floor","sqrt","map","t","pow","reduce","max","min","Infinity","afterError","onErrorError","Benchmark","__publicField","_Suite","benchmarks","passed","getSortedBenchmarksBy","benchmark","add","l","beforeEachError","run","afterEachError","sortBy","slice","result","getFastest","getSlowest","sortedBenchmarks","compareFastestWithSlowest","fastest","slowest","by","Suite"],"sources":["../lib/index.ts"],"sourcesContent":["// A benchmarking library that supports async hooks and benchmarks by default.\n// This library comes by the problem of handling async functions in a way that is compatible with benchmarking.\n// The problem is that async hook are not supported by Benchmark.js\n// For example, the following code will not work as expected:\n\n/*\n  new Benchmark('test', async () => {\n    await doSomething();\n  }, {\n    async: true,\n    async before() => {\n      console.log(1);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      console.log(2);\n    },\n  })\n*/\n\n// The previous code will log 1 and then run the benchmark and the log 2 could be logged before the benchmark is finished or could't be logged at all.\n// This problem prevent us to create an async before and/or after for a benchmark like an api call that could require it.\n\n// This library solves this problem by providing a way to create a benchmark with all the hooks and benchmark handled as async by default.\n\n// Simple examples\n// const bench = new Benchmark(\"name\", async () => {});\n// const bench = new Benchmark(\"name\", async () => {}, options);\n// const bench = new Benchmark(\"name\", {fn: async () => {}, ...options});\n// await bench.run();\n\n// Full example:\n// const bench = new Benchmark('myBenchmark', {\n//   maxTime: 5, // In seconds\n//   minSamples: 1,\n//   beforeEach: async () => {\n//     await doSomething();\n//   },\n//   afterEach: async () => {\n//     await doSomething();\n//   },\n//   after: async () => {\n//     await doSomething();\n//   },\n//   before: async () => {\n//     await doSomething();\n//   },\n//   onError: async (error) => {\n//     await doSomething();\n//   },\n//   fn: async () => {\n//     await doSomething();\n//   },\n// });\n// await bench.run();\n\n// The `Benchmark` constructor takes an `options` argument.\n// The `options` argument is an object with the following properties:\n// * `maxTime`: The maximum time in seconds that a benchmark can take including hooks.\n// * `minSamples`: The minimum number of samples that must be taken.\n// * `beforeEach`: A function to be run once before each benchmark loop, does not count for run time.\n// * `afterEach`: A function to be run once after each benchmark loop, does not count for run time.\n// * `after`: A function to be run once after the benchmark loop finishes, does not count for run time.\n// * `before`: A function to be run once before the benchmark loop starts, does not count for run time.\n// * `onError`: A function to be run if an error occurs.\n// * `fn`: The function to be run.\n\n// The `Benchmark` instance has the following properties:\n// * `name`: The name of the benchmark.\n// * `error`: The error object if an error occurred.\n// * `cycles`: The number of cycles performed.\n// * `hz`: The number of cycles per second.\n// * `meanTime`: The meanTime time per cycle.\n// * `medianTime`: The medianTime time per cycle.\n// * `standardDeviation`: The standard deviation.\n// * `maxTime`: The maximum time.\n// * `minTime`: The minimum time.\n// * `times`: An array of times for each cycle.\n// * `options`: The options object passed to the constructor.\n// * `stamp`: A timestamp representing when the benchmark was created.\n// * `runTime`: The total time taken to run the benchmark, this does not include beforeEach, afterEach, onStrart and after hooks.\n// * `totalTime`: The total time taken to run the benchmark including beforeEach, afterEach, before and after hooks.\n\n// The `Benchmark` instance has the following methods:\n// * `run`: Run the benchmark.\n// * `toJSON`: Return a JSON representation of the benchmark.\n// * `compareWith`: Compare this benchmark to another.\n\n// The `Benchmark` class has the following static properties:\n// * `version`: A string containing the library version.\n// * `defaults`: An object containing the default options.\n\n// If the `beforeEach` `afterEach` `after` `before` `onError` returns a Promise, the benchmark will wait for the promise to resolve before continuing.\n\n// If the `beforeEach` function throws an error, the benchmark will stop and emit an `BeforeEachError` event.\n// If the `afterEach` function throws an error, the benchmark will stop and emit an `AfterEachError` event.\n// If the `fn` function throws an error, the benchmark will stop and emit an `RunError` event.\n// If the `after` function throws an error, the benchmark will stop and emit an `AfterError` event.\n// If the `before` function throws an error, the benchmark will stop and emit an `BeforeError` event.\n// If the `onError` function throws an error, the benchmark will stop and emit an `FatalError` event.\n\n// This errors will be found in the `error` property of the benchmark instance.\n// When converting to JSON, the `errorMessage` property will be a string containing the error message.\n\nconst version = \"2.0.0\";\n\nlet now =\n  typeof performance === \"undefined\"\n    ? () => Date.now()\n    : () => performance.now();\n\n//*** Errors ***//\n\n// BenchmarkError: An error occurred during benchmarking.\nabstract class BenchmarkError extends Error {\n  private readonly code?: string;\n  readonly message: string;\n  readonly name: string;\n  statusCode = 0;\n  [key: string]: any;\n\n  constructor(message = \"Something went wrong\", code?: string) {\n    super();\n    this.message = message;\n    this.code = code;\n    this.name = (this.constructor as unknown as { name: string }).name;\n  }\n}\n\n//  BeforeEachError: The `beforeEach` function threw an error.\nclass BeforeEachError extends BenchmarkError {\n  statusCode = 1;\n  name = \"BeforeEachError\";\n}\n\n//  AfterEachError: The `afterEach` function threw an error.\nclass AfterEachError extends BenchmarkError {\n  statusCode = 2;\n  name = \"AfterEachError\";\n}\n\n//  RunError: The `fn` function threw an error.\nclass RunError extends BenchmarkError {\n  statusCode = 3;\n  name = \"RunError\";\n}\n\n//  AfterError: The `after` function threw an error.\nclass AfterError extends BenchmarkError {\n  statusCode = 4;\n  name = \"AfterError\";\n}\n\n//  BeforeError: The `before` function threw an error.\nclass BeforeError extends BenchmarkError {\n  statusCode = 5;\n  name = \"BeforeError\";\n}\n\n//  FatalError: The `onError` function threw an error.\nclass FatalError extends BenchmarkError {\n  statusCode = 7;\n  name = \"FatalError\";\n}\n\nconst Errors = {\n  BenchmarkError,\n  BeforeEachError,\n  AfterEachError,\n  RunError,\n  AfterError,\n  BeforeError,\n  FatalError\n};\n\ntype ErrorType =\n  | \"BeforeEachError\"\n  | \"AfterEachError\"\n  | \"RunError\"\n  | \"AfterError\"\n  | \"BeforeError\"\n  | \"FatalError\";\n\n// BenchmarkFunction a function that can be used as a benchmark.\ntype BenchmarkFunction = () => Promise<void | any> | void | any;\n\n//*** Benchmark Options Type ***//\ntype BenchmarkOptions = {\n  // The maximum time in seconds that a benchmark can take.\n  maxTime: number;\n  // The minimum number of samples that must be taken.\n  minSamples: number;\n  // A function to be run once before each benchmark loop, does not count for run time.\n  beforeEach?: (this: Benchmark) => Promise<void> | void;\n  // A function to be run once after each benchmark loop, does not count for run time.\n  afterEach?: (this: Benchmark) => Promise<void> | void;\n  // A function to be run once after the benchmark completes, does not count for run time.\n  after?: (this: Benchmark) => Promise<void> | void;\n  // A function to be run once before the benchmark starts, does not count for run time.\n  before?: (this: Benchmark) => Promise<void> | void;\n  // A function to be run if an error occurs.\n  onError?: (this: Benchmark, error: BenchmarkError) => Promise<void> | void;\n  // The function to be run.\n  fn: BenchmarkFunction;\n};\n\ninterface JsonBenchmark {\n  name: string;\n  errorMessage?: string;\n  cycles: number;\n  hz: number;\n  meanTime: number;\n  medianTime: number;\n  standardDeviation: number;\n  maxTime: number;\n  minTime: number;\n  runTime: number;\n  totalTime: number;\n  samples: number;\n}\n\nexport const enum CompareBy {\n  MeanTime = \"meanTime\",\n  MedianTime = \"medianTime\",\n  StandardDeviation = \"standardDeviation\",\n  MaxTime = \"maxTime\",\n  MinTime = \"minTime\",\n  Hz = \"hz\",\n  RunTime = \"runTime\",\n  Cycles = \"cycles\",\n  Percent = \"percent\"\n}\n\ntype BenchmarkConstructor = (\n  name: string,\n  optionsOrFn:\n    | (Partial<BenchmarkOptions> & { fn: BenchmarkFunction })\n    | BenchmarkFunction,\n  options: Partial<BenchmarkOptions>\n) => Benchmark;\n\nexport interface Benchmark {\n  Suite: typeof Suite;\n  readonly version: string;\n  readonly defaults: {\n    maxTime: number;\n    minSamples: number;\n  };\n  name: string;\n  error?: BenchmarkError;\n  cycles: number;\n  samples: number;\n  hz: number;\n  meanTime: number;\n  medianTime: number;\n  standardDeviation: number;\n  maxTime: number;\n  minTime: number;\n  times: number[];\n  options: BenchmarkOptions;\n  stamp: number;\n  runTime: number;\n  totalTime: number;\n  constructor: BenchmarkConstructor;\n  run(): Promise<void>;\n  toJSON(): JsonBenchmark;\n  compareWith(other: Benchmark, compareBy: CompareBy): number;\n}\n\n// helper to get the correct error type from a normal error\nfunction getError(\n  error: Error,\n  message: string,\n  type: ErrorType\n): BenchmarkError {\n  let benchmarkError = new Errors[type](message);\n  benchmarkError.stack = error.stack;\n  for (let i in error) {\n    if (error.hasOwnProperty(i)) {\n      benchmarkError[i] = (error as any)[i];\n    }\n  }\n  return benchmarkError;\n}\n\n// helper function to know if a function is async or not\nfunction isAsync(fn: BenchmarkFunction): boolean {\n  return fn.constructor.name === \"AsyncFunction\";\n}\n\nasync function runCallback(\n  instance: any,\n  errorTypeIfAny: ErrorType,\n  callback?: (...args: any[]) => Promise<void> | void,\n  ...args: any[]\n): Promise<void | BenchmarkError> {\n  if (callback) {\n    try {\n      await callback.bind(instance)(...args);\n    } catch (error) {\n      return getError(\n        error as Error,\n        `Benchmark \\`${instance.name}\\` failed to run \\`${\n          callback.name\n        }\\` callback: ${(error as Error).message}`,\n        errorTypeIfAny\n      );\n    }\n  }\n}\n\n// The benchmark class\nexport class Benchmark implements Benchmark {\n  static Suite: typeof Suite;\n  static readonly version: string = version;\n  static readonly defaults: {\n    maxTime: number;\n    minSamples: number;\n  } = {\n    maxTime: 5,\n    minSamples: 1\n  };\n\n  name: string;\n  error?: BenchmarkError;\n  cycles: number = 0;\n  samples: number = 0;\n  hz: number = 0;\n  meanTime: number = 0;\n  medianTime: number = 0;\n  standardDeviation: number = 0;\n  maxTime: number = 0;\n  minTime: number = 0;\n  times: number[] = [];\n  options: BenchmarkOptions;\n  stamp!: number;\n  runTime: number = 0;\n  totalTime: number = 0;\n\n  constructor(\n    name: string,\n    optionsOrFn:\n      | (Partial<BenchmarkOptions> & { fn: BenchmarkFunction })\n      | BenchmarkFunction,\n    options: Partial<BenchmarkOptions> = {}\n  ) {\n    this.name = name;\n    let opts = {\n      ...Benchmark.defaults,\n      ...options\n    } as BenchmarkOptions;\n\n    if (typeof optionsOrFn === \"function\") {\n      opts.fn = optionsOrFn;\n    } else {\n      opts = {\n        ...opts,\n        ...optionsOrFn\n      };\n    }\n\n    this.options = opts;\n  }\n\n  toJSON(): JsonBenchmark {\n    const {\n      name,\n      error,\n      cycles,\n      hz,\n      runTime,\n      totalTime,\n      samples,\n      meanTime,\n      medianTime,\n      standardDeviation,\n      maxTime,\n      minTime\n    } = this;\n\n    return {\n      name,\n      errorMessage: error ? error.message : undefined,\n      cycles,\n      samples,\n      hz,\n      meanTime,\n      medianTime,\n      standardDeviation,\n      maxTime,\n      minTime,\n      runTime,\n      totalTime\n    };\n  }\n\n  compareWith(\n    other: Benchmark,\n    compareBy: CompareBy = CompareBy.Percent\n  ): number {\n    const {\n      error,\n      cycles,\n      hz,\n      meanTime,\n      medianTime,\n      standardDeviation,\n      maxTime,\n      minTime,\n      runTime\n    } = this;\n\n    if (error) {\n      return -1;\n    }\n\n    if (other.error) {\n      return 1;\n    }\n\n    switch (compareBy) {\n      case \"meanTime\":\n        return other.meanTime - meanTime;\n      case \"medianTime\":\n        return other.medianTime - medianTime;\n      case \"standardDeviation\":\n        return standardDeviation - other.standardDeviation;\n      case \"maxTime\":\n        return maxTime - other.maxTime;\n      case \"minTime\":\n        return other.minTime - minTime;\n      case \"hz\":\n        return hz - other.hz;\n      case \"runTime\":\n        return runTime - other.runTime;\n      case \"cycles\":\n        return cycles - other.cycles;\n      case \"percent\":\n        return (\n          Math.trunc(((100 / meanTime) * other.meanTime - 100) * 100) / 100\n        );\n      default:\n        throw new Error(`Unknown compare field: ${compareBy}`);\n    }\n  }\n\n  async runSample() {\n    const { beforeEach, afterEach, fn } = this.options;\n    let sampleMaxTime = 1000;\n    let startTime = now();\n\n    while (now() - startTime < sampleMaxTime) {\n      const startCycleTime = now();\n      this.cycles++;\n      const BeforeEachError = await runCallback(\n        this,\n        \"BeforeEachError\",\n        beforeEach\n      );\n      if (BeforeEachError) {\n        throw BeforeEachError;\n      }\n\n      let time;\n      try {\n        if (isAsync(fn)) {\n          let start = now();\n          await fn();\n          time = now() - start;\n        } else {\n          let start = now();\n          fn();\n          time = now() - start;\n        }\n      } catch (error) {\n        throw getError(\n          error as Error,\n          `Benchmark \\`${this.name}\\` failed to run \\`fn\\`: ${\n            (error as Error).message\n          }`,\n          \"RunError\"\n        );\n      }\n\n      this.times.push(time);\n      this.runTime += time;\n\n      const AfterEachError = await runCallback(\n        this,\n        \"AfterEachError\",\n        afterEach\n      );\n      if (AfterEachError) {\n        throw AfterEachError;\n      }\n\n      this.totalTime += now() - startCycleTime;\n    }\n  }\n\n  // Run the benchmark.\n  async run(): Promise<void> {\n    this.stamp = now();\n    const { maxTime, minSamples, after, before, onError } = this.options;\n    let maxTimeInMilliseconds = maxTime * 1000;\n\n    try {\n      const beforeError = await runCallback(this, \"BeforeError\", before);\n      if (beforeError) {\n        throw beforeError;\n      }\n\n      while (\n        this.samples < minSamples ||\n        this.totalTime < maxTimeInMilliseconds\n      ) {\n        this.samples++;\n        await this.runSample();\n      }\n\n      // Calculate the hz by second\n      this.hz = this.cycles / (this.runTime / 1000);\n\n      // Calculate the mean, median, margin of error, and standard deviation.\n      this.meanTime = this.runTime / this.times.length;\n      this.medianTime =\n        this.times.sort((a, b) => a - b)[Math.floor(this.times.length / 2)] ||\n        0;\n      this.standardDeviation = Math.sqrt(\n        this.times\n          .map((t) => Math.pow(t - this.meanTime, 2))\n          .reduce((a, b) => a + b, 0) / this.times.length\n      );\n\n      // Calculate the max, min, and average times.\n      this.maxTime = this.times.reduce((max, time) => Math.max(max, time), 0);\n      this.minTime = this.times.reduce(\n        (min, time) => Math.min(min, time),\n        Infinity\n      );\n\n      const afterError = await runCallback(this, \"AfterError\", after);\n      if (afterError) {\n        throw afterError;\n      }\n    } catch (error) {\n      this.error = error as BenchmarkError;\n\n      const onErrorError = await runCallback(\n        this,\n        \"FatalError\",\n        onError,\n        error\n      );\n      if (onErrorError) {\n        throw onErrorError;\n      }\n    }\n  }\n}\n\n//*** Class Suite ***//\ntype SuiteOptions = {\n  // The maximum time in seconds that a benchmark can take.\n  maxTime: number;\n  // The minimum number of samples that must be taken.\n  minSamples: number;\n  // A function to be run once before each benchmark run\n  beforeEach?: (\n    this: Suite,\n    benchmark: Benchmark,\n    i: number\n  ) => Promise<void> | void;\n  // A function to be run once after each benchmark run\n  afterEach?: (\n    this: Suite,\n    benchmark: Benchmark,\n    i: number\n  ) => Promise<void> | void;\n  // A function to be run once after the suite completes\n  after?: (this: Suite) => Promise<void> | void;\n  // A function to be run once before the suite starts\n  before?: (this: Suite) => Promise<void> | void;\n  // A function to be run if an error occurs.\n  onError?: (this: Suite, error: BenchmarkError) => Promise<void> | void;\n};\n\ninterface JsonSuite {\n  name: string;\n  errorMessage?: string;\n  runTime: number;\n  totalTime: number;\n  passed: boolean;\n  benchmarks: JsonBenchmark[];\n}\n\ntype SuiteConstructor = (\n  name: string,\n  options?: Partial<SuiteOptions>\n) => Suite;\n\ninterface Suite {\n  readonly defaults: {\n    maxTime: number;\n    minSamples: number;\n  };\n\n  name: string;\n  error?: BenchmarkError;\n  options: SuiteOptions;\n  stamp: number;\n  runTime: number;\n  totalTime: number;\n  benchmarks: Benchmark[];\n\n  constructor: SuiteConstructor;\n  add(\n    name: string,\n    optionsOrFn:\n      | (Partial<BenchmarkOptions> & { fn: BenchmarkFunction })\n      | BenchmarkFunction,\n    options: Partial<BenchmarkOptions>\n  ): Benchmark;\n  toJSON(): JsonSuite;\n  run(): Promise<void>;\n\n  getSortedBenchmarksBy(sortedBy: CompareBy): Benchmark[];\n  getFastest(sortedBy: CompareBy): Benchmark;\n  getSlowest(sortedBy: CompareBy): Benchmark;\n  compareFastestWithSlowest(compareBy: CompareBy): {\n    fastest: Benchmark;\n    slowest: Benchmark;\n    by: number;\n  };\n}\n\nclass Suite implements Suite {\n  static readonly defaults = {\n    maxTime: 5,\n    minSamples: 1\n  };\n\n  name: string;\n  error?: BenchmarkError;\n  options: SuiteOptions;\n  stamp!: number;\n  runTime: number = 0;\n  totalTime: number = 0;\n  benchmarks: Benchmark[] = [];\n\n  constructor(name: string, options: Partial<SuiteOptions> = {}) {\n    this.name = name;\n    this.options = {\n      ...Suite.defaults,\n      ...options\n    };\n  }\n\n  toJSON(): JsonSuite {\n    const { error, name, runTime, totalTime } = this;\n\n    return {\n      name,\n      errorMessage: error ? error.message : undefined,\n      runTime,\n      totalTime,\n      passed: !error,\n      benchmarks: this.getSortedBenchmarksBy(CompareBy.MeanTime).map(\n        (benchmark) => benchmark.toJSON()\n      )\n    };\n  }\n\n  add(\n    name: string,\n    optionsOrFn:\n      | (Partial<BenchmarkOptions> & { fn: BenchmarkFunction })\n      | BenchmarkFunction,\n    options: Partial<BenchmarkOptions> = {}\n  ): Benchmark {\n    let opts = {\n      ...{\n        minSamples: this.options.minSamples,\n        maxTime: this.options.maxTime\n      },\n      ...options\n    } as BenchmarkOptions;\n\n    if (typeof optionsOrFn === \"function\") {\n      opts.fn = optionsOrFn;\n    } else {\n      opts = {\n        ...opts,\n        ...optionsOrFn\n      };\n    }\n    let benchmark = new Benchmark(name, opts);\n    this.benchmarks.push(benchmark);\n    return benchmark;\n  }\n\n  async run(): Promise<void> {\n    this.stamp = now();\n    const { beforeEach, afterEach, after, before, onError } = this.options;\n\n    try {\n      const beforeError = await runCallback(this, \"BeforeError\", before);\n      if (beforeError) {\n        throw beforeError;\n      }\n\n      for (let i = 0, l = this.benchmarks.length; i < l; i++) {\n        let benchmark = this.benchmarks[i];\n        const beforeEachError = await runCallback(\n          this,\n          \"BeforeEachError\",\n          beforeEach,\n          benchmark,\n          i\n        );\n        if (beforeEachError) {\n          throw beforeEachError;\n        }\n\n        await benchmark.run();\n        this.runTime += benchmark.runTime;\n        this.totalTime += benchmark.totalTime;\n\n        const afterEachError = await runCallback(\n          this,\n          \"AfterEachError\",\n          afterEach,\n          benchmark,\n          i\n        );\n        if (afterEachError) {\n          throw afterEachError;\n        }\n      }\n\n      const afterError = await runCallback(this, \"AfterError\", after);\n      if (afterError) {\n        throw afterError;\n      }\n    } catch (error) {\n      this.error = error as BenchmarkError;\n\n      const onErrorError = await runCallback(\n        this,\n        \"FatalError\",\n        onError,\n        error\n      );\n      if (onErrorError) {\n        throw onErrorError;\n      }\n    }\n  }\n\n  getSortedBenchmarksBy(sortBy: CompareBy): Benchmark[] {\n    const benchmarks = this.benchmarks.slice();\n    const sortedBenchmarks = benchmarks.sort((a, b) => {\n      let result = b.compareWith(a, sortBy);\n      return result > 0 ? 1 : result < 0 ? -1 : 0;\n    });\n\n    return sortedBenchmarks;\n  }\n\n  getFastest(sortBy: CompareBy): Benchmark {\n    const sortedBenchmarks = this.getSortedBenchmarksBy(sortBy);\n    return sortedBenchmarks[0];\n  }\n\n  getSlowest(sortBy: CompareBy): Benchmark {\n    const sortedBenchmarks = this.getSortedBenchmarksBy(sortBy);\n    return sortedBenchmarks[sortedBenchmarks.length - 1];\n  }\n\n  compareFastestWithSlowest(compareBy: CompareBy) {\n    let sortBy =\n      compareBy === CompareBy.Percent ? CompareBy.MeanTime : compareBy;\n    const fastest = this.getFastest(sortBy);\n    const slowest = this.getSlowest(sortBy);\n\n    return {\n      fastest,\n      slowest,\n      by: fastest.compareWith(slowest, compareBy)\n    };\n  }\n}\n\nBenchmark.Suite = Suite;\n"],"mappings":"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"}