//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9pbmRleC50cyJdLCJuYW1lcyI6WyJrIiwibiIsImQiLCJFcnJvciIsImNvZGUiLCJtZXNzYWdlIiwibmFtZSIsInN0YXR1c0NvZGUiLCJjb25zdHJ1Y3RvciIsImUiLCJyIiwic3VwZXIiLCJ0aGlzIiwieiIsIkJlbmNobWFya0Vycm9yIiwiYmVmb3JlRWFjaEVycm9yIiwiYWZ0ZXJFYWNoRXJyb3IiLCJSdW5FcnJvciIsIkNvbXBsZXRlRXJyb3IiLCJTdGFydEVycm9yIiwiRmF0YWxFcnJvciIsIkYiLCJvIiwidCIsInN0YWNrIiwiYXN5bmMiLCJsIiwiYmluZCIsImkiLCJNZWFuVGltZSIsIk1lZGlhblRpbWUiLCJTdGFuZGFyZERldmlhdGlvbiIsIk1heFRpbWUiLCJNaW5UaW1lIiwiSHoiLCJSdW5UaW1lIiwiQ3ljbGVzIiwiUGVyY2VudCIsImciLCJlcnJvciIsImN5Y2xlcyIsInNhbXBsZXMiLCJoeiIsIm1lYW5UaW1lIiwibWVkaWFuVGltZSIsInN0YW5kYXJkRGV2aWF0aW9uIiwibWF4VGltZSIsIm1pblRpbWUiLCJ0aW1lcyIsIm9wdGlvbnMiLCJzdGFtcCIsInJ1blRpbWUiLCJ0b3RhbFRpbWUiLCJkZWZhdWx0cyIsImZuIiwidG9KU09OIiwibSIsImMiLCJoIiwiYSIsInMiLCJ1IiwiZiIsImVycm9yTWVzc2FnZSIsImNvbXBhcmVXaXRoIiwiTWF0aCIsInRydW5jIiwicnVuU2FtcGxlIiwiYmVmb3JlRWFjaCIsImFmdGVyRWFjaCIsInBlcmZvcm1hbmNlIiwibm93IiwicHVzaCIsInJ1biIsIm1pblNhbXBsZXMiLCJvbkNvbXBsZXRlIiwib25TdGFydCIsIm9uRXJyb3IiLCJsZW5ndGgiLCJzb3J0IiwiZmxvb3IiLCJzcXJ0IiwibWFwIiwicG93IiwicmVkdWNlIiwibWF4IiwibWluIiwicCIsImIiLCJ5IiwiYmVuY2htYXJrcyIsInBhc3NlZCIsImFkZCIsImdldFNvcnRlZEJlbmNobWFya3NCeSIsInNsaWNlIiwiZ2V0RmFzdGVzdCIsImdldFNsb3dlc3QiLCJjb21wYXJlRmFzdGVzdFdpdGhMb3dlc3QiLCJmYXN0ZXN0Iiwic2xvd2VzdCIsImJ5IiwiVCIsIlN1aXRlIiwiX19FWFBPUlRTX18iLCJDb21wYXJlQnkiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiVUFpTk9BLEVBQ0xDLDhKQXJHRkMsRUFBQSxjQUNtQkMsTUFDUkMsS0FBQUMsUUFFVEMsS0FBQUMsV0FFQSxFQUFBQyxZQUFzQkMsRUFBQSx1QkFDcEJDLEdBQUFDLFFBQ0tDLEtBQUFQLFFBQ0xJLEVBQUtHLEtBQU9SLEtBQ1pNLEVBQUtFLEtBQVFOLEtBQUtNLEtBQUFKLFlBQTRDRixPQXlDaEVPLEVBQUEsQ0FBQUMsZUFDQVosRUFBQWEsZ0JBckNGLGNBQ0ViLEVBQUFLLFdBQ0EsRUFBT0QsS0FBQSxtQkFvQ1BVLGVBaENGLGNBQ0VkLEVBQUFLLFdBQ0EsRUFBT0QsS0FBQSxrQkErQlBXLFNBM0JGLGNBQ0VmLEVBQUFLLFdBQ0EsRUFBT0QsS0FBQSxZQTBCUFksY0F0QkYsY0FDRWhCLEVBQUFLLFdBQ0EsRUFBT0QsS0FBQSxpQkFxQlBhLFdBakJGLGNBQ0VqQixFQUFBSyxXQUNBLEVBQU9ELEtBQUEsY0FnQlBjLFdBWkYsY0FDRWxCLEVBQUFLLFdBQ0EsRUFBT0QsS0FBQSxlQW9HVCxTQUFpRGUsRUFBaUNDLEVBQ2hGYixFQUFJQyxHQUFpQixJQUFJYSxFQUFPLElBQU1WLEVBQ3RDSCxHQUFBRCxHQUFBLE9BQWVjLEVBQVFDLE1BQU1GLEVBQ3RCRSxNQUlURCxFQUlBRSxlQUdFQyxFQUFBSixFQUFBYixFQUNHQyxLQUVDYSxHQUNGLEdBQ0ViLEVBQUEsVUFBZUEsRUFBS2lCLEtBQWFMLEVBQWxCWixJQUFrQmEsR0FDMUIsTUFDUEssR0FBTyxPQUFnQlAsRUFBQU8sRUFBQSxlQUF3Qk4sRUFBQWhCLDBCQUFtQ0ksRUFBQUosb0JBQTBCc0IsRUFBQXZCLFVBTWxISSxLQXpFRVIsRUFEZ0JELElBQUFBLEVBK0NsQixLQTlDRTZCLFNBQVcsV0FDWDVCLEVBQUE2QixX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OEUsV0FBV0ksUUFDT2YsS0FBRyxDQUFNbkQsRUFDakQ0QixLQUFhLElBQUVDLEVBQUFELEVBQUFRLFlBQ2ZwQyxFQUFBbkIsR0FBTyxPQUFpQmdELEVBQVMsRUFBSSxFQUFBQSxFQUFLLEdBTTlDLEVBQUEsSUFBQXNDLFdBRUV0RixHQUFPLE9BRHVCRyxLQUFBaUYsc0JBSWhDcEYsR0FBQSxHQUFBdUYsV0FDUXZGLEdBQW1CLElBQUFDLEVBQUtFLEtBQUFpRixzQkFDOUJwRixHQUFPLE9BQWtDQyxFQUFBQSxFQUFBb0UsT0FHM0MsR0FBQW1CLHlCQUNReEYsR0FBVSxJQUFBQyxFQUFLRSxLQUFBbUYsV0FDTHRGLEdBQUFjLEVBQUtYLEtBQUFvRixXQUVyQnZGLEdBQU8sTUFDTCxDQUFBeUYsUUFDQXhGLEVBQUF5RixRQUNJNUUsRUFBUTZFLEdBQUExRixFQUFBc0QsWUFBcUJ6QyxFQWpJdkNkLE1BQUE0RixFQUNrQlosRUFBQUQsRUFBQWEsRUFBQSxXQUNkLENBQUF2RCxRQUNBLEVBQUE0QixXQW1JTSxJQUFBYSxFQUFRZSxNQUdYRCxFQUFRLElBQUFFLEVBQUEsQ0FBQUMsVUFBQXhHLEVBQUF5RyxRQUFBbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIGJlbmNobWFya2luZyBsaWJyYXJ5IHRoYXQgc3VwcG9ydHMgYXN5bmMgaG9va3MgYW5kIGJlbmNobWFya3MgYnkgZGVmYXVsdC5cbi8vIFRoaXMgbGlicmFyeSBjb21lcyBieSB0aGUgcHJvYmxlbSBvZiBoYW5kbGluZyBhc3luYyBmdW5jdGlvbnMgaW4gYSB3YXkgdGhhdCBpcyBjb21wYXRpYmxlIHdpdGggYmVuY2htYXJraW5nLlxuLy8gVGhlIHByb2JsZW0gaXMgdGhhdCBhc3luYyBob29rIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IEJlbmNobWFyay5qc1xuLy8gRm9yIGV4YW1wbGUsIHRoZSBmb2xsb3dpbmcgY29kZSB3aWxsIG5vdCB3b3JrIGFzIGV4cGVjdGVkOlxuXG4vKlxuICBuZXcgQmVuY2htYXJrKCd0ZXN0JywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRvU29tZXRoaW5nKCk7XG4gIH0sIHtcbiAgICBhc3luYzogdHJ1ZSxcbiAgICBhc3luYyBvblN0YXJ0KCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coMSk7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xuICAgICAgY29uc29sZS5sb2coMik7XG4gICAgfSxcbiAgfSlcbiovXG5cbi8vIFRoZSBwcmV2aW91cyBjb2RlIHdpbGwgbG9nIDEgYW5kIHRoZW4gcnVuIHRoZSBiZW5jaG1hcmsgYW5kIHRoZSBsb2cgMiBjb3VsZCBiZSBsb2dnZWQgYmVmb3JlIHRoZSBiZW5jaG1hcmsgaXMgZmluaXNoZWQgb3IgY291bGQndCBiZSBsb2dnZWQgYXQgYWxsLlxuLy8gVGhpcyBwcm9ibGVtIHByZXZlbnQgdXMgdG8gY3JlYXRlIGFuIGFzeW5jIG9uU3RhcnQgYW5kL29yIG9uQ29tcGxldGUgZm9yIGEgYmVuY2htYXJrIGxpa2UgYW4gYXBpIGNhbGwgdGhhdCBjb3VsZCByZXF1aXJlIGl0LlxuXG4vLyBUaGlzIGxpYnJhcnkgc29sdmVzIHRoaXMgcHJvYmxlbSBieSBwcm92aWRpbmcgYSB3YXkgdG8gY3JlYXRlIGEgYmVuY2htYXJrIHdpdGggYWxsIHRoZSBob29rcyBhbmQgYmVuY2htYXJrIGhhbmRsZWQgYXMgYXN5bmMgYnkgZGVmYXVsdC5cblxuLy8gU2ltcGxlIGV4YW1wbGVzXG4vLyBjb25zdCBiZW5jaCA9IG5ldyBCZW5jaG1hcmsoXCJuYW1lXCIsIGFzeW5jICgpID0+IHt9KTtcbi8vIGNvbnN0IGJlbmNoID0gbmV3IEJlbmNobWFyayhcIm5hbWVcIiwgYXN5bmMgKCkgPT4ge30sIG9wdGlvbnMpO1xuLy8gY29uc3QgYmVuY2ggPSBuZXcgQmVuY2htYXJrKFwibmFtZVwiLCB7Zm46IGFzeW5jICgpID0+IHt9LCAuLi5vcHRpb25zfSk7XG4vLyBhd2FpdCBiZW5jaC5ydW4oKTtcblxuLy8gRnVsbCBleGFtcGxlOlxuLy8gY29uc3QgYmVuY2ggPSBuZXcgQmVuY2htYXJrKCdteUJlbmNobWFyaycsIHtcbi8vICAgbWF4VGltZTogNSwgLy8gSW4gc2Vjb25kc1xuLy8gICBtaW5TYW1wbGVzOiAxLFxuLy8gICBiZWZvcmVFYWNoOiBhc3luYyAoKSA9PiB7XG4vLyAgICAgYXdhaXQgZG9Tb21ldGhpbmcoKTtcbi8vICAgfSxcbi8vICAgYWZ0ZXJFYWNoOiBhc3luYyAoKSA9PiB7XG4vLyAgICAgYXdhaXQgZG9Tb21ldGhpbmcoKTtcbi8vICAgfSxcbi8vICAgb25Db21wbGV0ZTogYXN5bmMgKCkgPT4ge1xuLy8gICAgIGF3YWl0IGRvU29tZXRoaW5nKCk7XG4vLyAgIH0sXG4vLyAgIG9uU3RhcnQ6IGFzeW5jICgpID0+IHtcbi8vICAgICBhd2FpdCBkb1NvbWV0aGluZygpO1xuLy8gICB9LFxuLy8gICBvbkVycm9yOiBhc3luYyAoZXJyb3IpID0+IHtcbi8vICAgICBhd2FpdCBkb1NvbWV0aGluZygpO1xuLy8gICB9LFxuLy8gICBmbjogYXN5bmMgKCkgPT4ge1xuLy8gICAgIGF3YWl0IGRvU29tZXRoaW5nKCk7XG4vLyAgIH0sXG4vLyB9KTtcbi8vIGF3YWl0IGJlbmNoLnJ1bigpO1xuXG4vLyBUaGUgYEJlbmNobWFya2AgY29uc3RydWN0b3IgdGFrZXMgYW4gYG9wdGlvbnNgIGFyZ3VtZW50LlxuLy8gVGhlIGBvcHRpb25zYCBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4vLyAqIGBtYXhUaW1lYDogVGhlIG1heGltdW0gdGltZSBpbiBzZWNvbmRzIHRoYXQgYSBiZW5jaG1hcmsgY2FuIHRha2UgaW5jbHVkaW5nIGhvb2tzLlxuLy8gKiBgbWluU2FtcGxlc2A6IFRoZSBtaW5pbXVtIG51bWJlciBvZiBzYW1wbGVzIHRoYXQgbXVzdCBiZSB0YWtlbi5cbi8vICogYGJlZm9yZUVhY2hgOiBBIGZ1bmN0aW9uIHRvIGJlIHJ1biBvbmNlIGJlZm9yZSBlYWNoIGJlbmNobWFyayBsb29wLCBkb2VzIG5vdCBjb3VudCBmb3IgcnVuIHRpbWUuXG4vLyAqIGBhZnRlckVhY2hgOiBBIGZ1bmN0aW9uIHRvIGJlIHJ1biBvbmNlIGFmdGVyIGVhY2ggYmVuY2htYXJrIGxvb3AsIGRvZXMgbm90IGNvdW50IGZvciBydW4gdGltZS5cbi8vICogYG9uQ29tcGxldGVgOiBBIGZ1bmN0aW9uIHRvIGJlIHJ1biBvbmNlIGFmdGVyIHRoZSBiZW5jaG1hcmsgbG9vcCBmaW5pc2hlcywgZG9lcyBub3QgY291bnQgZm9yIHJ1biB0aW1lLlxuLy8gKiBgb25TdGFydGA6IEEgZnVuY3Rpb24gdG8gYmUgcnVuIG9uY2UgYmVmb3JlIHRoZSBiZW5jaG1hcmsgbG9vcCBzdGFydHMsIGRvZXMgbm90IGNvdW50IGZvciBydW4gdGltZS5cbi8vICogYG9uRXJyb3JgOiBBIGZ1bmN0aW9uIHRvIGJlIHJ1biBpZiBhbiBlcnJvciBvY2N1cnMuXG4vLyAqIGBmbmA6IFRoZSBmdW5jdGlvbiB0byBiZSBydW4uXG5cbi8vIFRoZSBgQmVuY2htYXJrYCBpbnN0YW5jZSBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuLy8gKiBgbmFtZWA6IFRoZSBuYW1lIG9mIHRoZSBiZW5jaG1hcmsuXG4vLyAqIGBlcnJvcmA6IFRoZSBlcnJvciBvYmplY3QgaWYgYW4gZXJyb3Igb2NjdXJyZWQuXG4vLyAqIGBjeWNsZXNgOiBUaGUgbnVtYmVyIG9mIGN5Y2xlcyBwZXJmb3JtZWQuXG4vLyAqIGBoemA6IFRoZSBudW1iZXIgb2YgY3ljbGVzIHBlciBzZWNvbmQuXG4vLyAqIGBtZWFuVGltZWA6IFRoZSBtZWFuVGltZSB0aW1lIHBlciBjeWNsZS5cbi8vICogYG1lZGlhblRpbWVgOiBUaGUgbWVkaWFuVGltZSB0aW1lIHBlciBjeWNsZS5cbi8vICogYHN0YW5kYXJkRGV2aWF0aW9uYDogVGhlIHN0YW5kYXJkIGRldmlhdGlvbi5cbi8vICogYG1heFRpbWVgOiBUaGUgbWF4aW11bSB0aW1lLlxuLy8gKiBgbWluVGltZWA6IFRoZSBtaW5pbXVtIHRpbWUuXG4vLyAqIGB0aW1lc2A6IEFuIGFycmF5IG9mIHRpbWVzIGZvciBlYWNoIGN5Y2xlLlxuLy8gKiBgb3B0aW9uc2A6IFRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuLy8gKiBgc3RhbXBgOiBBIHRpbWVzdGFtcCByZXByZXNlbnRpbmcgd2hlbiB0aGUgYmVuY2htYXJrIHdhcyBjcmVhdGVkLlxuLy8gKiBgcnVuVGltZWA6IFRoZSB0b3RhbCB0aW1lIHRha2VuIHRvIHJ1biB0aGUgYmVuY2htYXJrLCB0aGlzIGRvZXMgbm90IGluY2x1ZGUgYmVmb3JlRWFjaCwgYWZ0ZXJFYWNoLCBvblN0cmFydCBhbmQgb25Db21wbGV0ZSBob29rcy5cbi8vICogYHRvdGFsVGltZWA6IFRoZSB0b3RhbCB0aW1lIHRha2VuIHRvIHJ1biB0aGUgYmVuY2htYXJrIGluY2x1ZGluZyBiZWZvcmVFYWNoLCBhZnRlckVhY2gsIG9uU3RhcnQgYW5kIG9uQ29tcGxldGUgaG9va3MuXG5cbi8vIFRoZSBgQmVuY2htYXJrYCBpbnN0YW5jZSBoYXMgdGhlIGZvbGxvd2luZyBtZXRob2RzOlxuLy8gKiBgcnVuYDogUnVuIHRoZSBiZW5jaG1hcmsuXG4vLyAqIGB0b0pTT05gOiBSZXR1cm4gYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBiZW5jaG1hcmsuXG4vLyAqIGBjb21wYXJlV2l0aGA6IENvbXBhcmUgdGhpcyBiZW5jaG1hcmsgdG8gYW5vdGhlci5cblxuLy8gVGhlIGBCZW5jaG1hcmtgIGNsYXNzIGhhcyB0aGUgZm9sbG93aW5nIHN0YXRpYyBwcm9wZXJ0aWVzOlxuLy8gKiBgdmVyc2lvbmA6IEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGxpYnJhcnkgdmVyc2lvbi5cbi8vICogYGRlZmF1bHRzYDogQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGRlZmF1bHQgb3B0aW9ucy5cblxuLy8gSWYgdGhlIGBiZWZvcmVFYWNoYCBgYWZ0ZXJFYWNoYCBgb25Db21wbGV0ZWAgYG9uU3RhcnRgIGBvbkVycm9yYCByZXR1cm5zIGEgUHJvbWlzZSwgdGhlIGJlbmNobWFyayB3aWxsIHdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGNvbnRpbnVpbmcuXG5cbi8vIElmIHRoZSBgYmVmb3JlRWFjaGAgZnVuY3Rpb24gdGhyb3dzIGFuIGVycm9yLCB0aGUgYmVuY2htYXJrIHdpbGwgc3RvcCBhbmQgZW1pdCBhbiBgYmVmb3JlRWFjaEVycm9yYCBldmVudC5cbi8vIElmIHRoZSBgYWZ0ZXJFYWNoYCBmdW5jdGlvbiB0aHJvd3MgYW4gZXJyb3IsIHRoZSBiZW5jaG1hcmsgd2lsbCBzdG9wIGFuZCBlbWl0IGFuIGBhZnRlckVhY2hFcnJvcmAgZXZlbnQuXG4vLyBJZiB0aGUgYGZuYCBmdW5jdGlvbiB0aHJvd3MgYW4gZXJyb3IsIHRoZSBiZW5jaG1hcmsgd2lsbCBzdG9wIGFuZCBlbWl0IGFuIGBSdW5FcnJvcmAgZXZlbnQuXG4vLyBJZiB0aGUgYG9uQ29tcGxldGVgIGZ1bmN0aW9uIHRocm93cyBhbiBlcnJvciwgdGhlIGJlbmNobWFyayB3aWxsIHN0b3AgYW5kIGVtaXQgYW4gYENvbXBsZXRlRXJyb3JgIGV2ZW50LlxuLy8gSWYgdGhlIGBvblN0YXJ0YCBmdW5jdGlvbiB0aHJvd3MgYW4gZXJyb3IsIHRoZSBiZW5jaG1hcmsgd2lsbCBzdG9wIGFuZCBlbWl0IGFuIGBTdGFydEVycm9yYCBldmVudC5cbi8vIElmIHRoZSBgb25FcnJvcmAgZnVuY3Rpb24gdGhyb3dzIGFuIGVycm9yLCB0aGUgYmVuY2htYXJrIHdpbGwgc3RvcCBhbmQgZW1pdCBhbiBgRmF0YWxFcnJvcmAgZXZlbnQuXG5cbi8vIFRoaXMgZXJyb3JzIHdpbGwgYmUgZm91bmQgaW4gdGhlIGBlcnJvcmAgcHJvcGVydHkgb2YgdGhlIGJlbmNobWFyayBpbnN0YW5jZS5cbi8vIFdoZW4gY29udmVydGluZyB0byBKU09OLCB0aGUgYGVycm9yTWVzc2FnZWAgcHJvcGVydHkgd2lsbCBiZSBhIHN0cmluZyBjb250YWluaW5nIHRoZSBlcnJvciBtZXNzYWdlLlxuXG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuXG5kZWNsYXJlIGNvbnN0IHBlcmZvcm1hbmNlOiBhbnk7XG5cbi8vKioqIEVycm9ycyAqKiovL1xuXG4vLyBCZW5jaG1hcmtFcnJvcjogQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGJlbmNobWFya2luZy5cbmFic3RyYWN0IGNsYXNzIEJlbmNobWFya0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwcml2YXRlIHJlYWRvbmx5IGNvZGU/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IG1lc3NhZ2U6IHN0cmluZztcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICBzdGF0dXNDb2RlID0gMDtcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gXCJTb21ldGhpbmcgd2VudCB3cm9uZ1wiLCBjb2RlPzogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5uYW1lID0gKHRoaXMuY29uc3RydWN0b3IgYXMgdW5rbm93biBhcyB7IG5hbWU6IHN0cmluZyB9KS5uYW1lO1xuICB9XG59XG5cbi8vICBiZWZvcmVFYWNoRXJyb3I6IFRoZSBgYmVmb3JlRWFjaGAgZnVuY3Rpb24gdGhyZXcgYW4gZXJyb3IuXG5jbGFzcyBiZWZvcmVFYWNoRXJyb3IgZXh0ZW5kcyBCZW5jaG1hcmtFcnJvciB7XG4gIHN0YXR1c0NvZGUgPSAxO1xuICBuYW1lID0gXCJiZWZvcmVFYWNoRXJyb3JcIjtcbn1cblxuLy8gIGFmdGVyRWFjaEVycm9yOiBUaGUgYGFmdGVyRWFjaGAgZnVuY3Rpb24gdGhyZXcgYW4gZXJyb3IuXG5jbGFzcyBhZnRlckVhY2hFcnJvciBleHRlbmRzIEJlbmNobWFya0Vycm9yIHtcbiAgc3RhdHVzQ29kZSA9IDI7XG4gIG5hbWUgPSBcImFmdGVyRWFjaEVycm9yXCI7XG59XG5cbi8vICBSdW5FcnJvcjogVGhlIGBmbmAgZnVuY3Rpb24gdGhyZXcgYW4gZXJyb3IuXG5jbGFzcyBSdW5FcnJvciBleHRlbmRzIEJlbmNobWFya0Vycm9yIHtcbiAgc3RhdHVzQ29kZSA9IDM7XG4gIG5hbWUgPSBcIlJ1bkVycm9yXCI7XG59XG5cbi8vICBDb21wbGV0ZUVycm9yOiBUaGUgYG9uQ29tcGxldGVgIGZ1bmN0aW9uIHRocmV3IGFuIGVycm9yLlxuY2xhc3MgQ29tcGxldGVFcnJvciBleHRlbmRzIEJlbmNobWFya0Vycm9yIHtcbiAgc3RhdHVzQ29kZSA9IDQ7XG4gIG5hbWUgPSBcIkNvbXBsZXRlRXJyb3JcIjtcbn1cblxuLy8gIFN0YXJ0RXJyb3I6IFRoZSBgb25TdGFydGAgZnVuY3Rpb24gdGhyZXcgYW4gZXJyb3IuXG5jbGFzcyBTdGFydEVycm9yIGV4dGVuZHMgQmVuY2htYXJrRXJyb3Ige1xuICBzdGF0dXNDb2RlID0gNTtcbiAgbmFtZSA9IFwiU3RhcnRFcnJvclwiO1xufVxuXG4vLyAgRmF0YWxFcnJvcjogVGhlIGBvbkVycm9yYCBmdW5jdGlvbiB0aHJldyBhbiBlcnJvci5cbmNsYXNzIEZhdGFsRXJyb3IgZXh0ZW5kcyBCZW5jaG1hcmtFcnJvciB7XG4gIHN0YXR1c0NvZGUgPSA3O1xuICBuYW1lID0gXCJGYXRhbEVycm9yXCI7XG59XG5cbmNvbnN0IEVycm9ycyA9IHtcbiAgQmVuY2htYXJrRXJyb3IsXG4gIGJlZm9yZUVhY2hFcnJvcixcbiAgYWZ0ZXJFYWNoRXJyb3IsXG4gIFJ1bkVycm9yLFxuICBDb21wbGV0ZUVycm9yLFxuICBTdGFydEVycm9yLFxuICBGYXRhbEVycm9yXG59O1xuXG50eXBlIEVycm9yVHlwZSA9IFwiYmVmb3JlRWFjaEVycm9yXCIgfCBcImFmdGVyRWFjaEVycm9yXCIgfCBcIlJ1bkVycm9yXCIgfCBcIkNvbXBsZXRlRXJyb3JcIiB8IFwiU3RhcnRFcnJvclwiIHwgXCJGYXRhbEVycm9yXCI7XG5cbi8vIEJlbmNobWFya0Z1bmN0aW9uIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCBhcyBhIGJlbmNobWFyay5cbnR5cGUgQmVuY2htYXJrRnVuY3Rpb24gPSAoKSA9PiBQcm9taXNlPHZvaWQgfCBhbnk+IHwgdm9pZCB8IGFueTtcblxuLy8qKiogQmVuY2htYXJrIE9wdGlvbnMgVHlwZSAqKiovL1xudHlwZSBCZW5jaG1hcmtPcHRpb25zID0ge1xuICAvLyBUaGUgbWF4aW11bSB0aW1lIGluIHNlY29uZHMgdGhhdCBhIGJlbmNobWFyayBjYW4gdGFrZS5cbiAgbWF4VGltZTogbnVtYmVyO1xuICAvLyBUaGUgbWluaW11bSBudW1iZXIgb2Ygc2FtcGxlcyB0aGF0IG11c3QgYmUgdGFrZW4uXG4gIG1pblNhbXBsZXM6IG51bWJlcjtcbiAgLy8gQSBmdW5jdGlvbiB0byBiZSBydW4gb25jZSBiZWZvcmUgZWFjaCBiZW5jaG1hcmsgbG9vcCwgZG9lcyBub3QgY291bnQgZm9yIHJ1biB0aW1lLlxuICBiZWZvcmVFYWNoPzogKCkgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XG4gIC8vIEEgZnVuY3Rpb24gdG8gYmUgcnVuIG9uY2UgYWZ0ZXIgZWFjaCBiZW5jaG1hcmsgbG9vcCwgZG9lcyBub3QgY291bnQgZm9yIHJ1biB0aW1lLlxuICBhZnRlckVhY2g/OiAoKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcbiAgLy8gQSBmdW5jdGlvbiB0byBiZSBydW4gb25jZSBhZnRlciB0aGUgYmVuY2htYXJrIGNvbXBsZXRlcywgZG9lcyBub3QgY291bnQgZm9yIHJ1biB0aW1lLlxuICBvbkNvbXBsZXRlPzogKCkgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XG4gIC8vIEEgZnVuY3Rpb24gdG8gYmUgcnVuIG9uY2UgYmVmb3JlIHRoZSBiZW5jaG1hcmsgc3RhcnRzLCBkb2VzIG5vdCBjb3VudCBmb3IgcnVuIHRpbWUuXG4gIG9uU3RhcnQ/OiAoKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcbiAgLy8gQSBmdW5jdGlvbiB0byBiZSBydW4gaWYgYW4gZXJyb3Igb2NjdXJzLlxuICBvbkVycm9yPzogKGVycm9yOiBCZW5jaG1hcmtFcnJvcikgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XG4gIC8vIFRoZSBmdW5jdGlvbiB0byBiZSBydW4uXG4gIGZuOiBCZW5jaG1hcmtGdW5jdGlvbjtcbn07XG5cbmludGVyZmFjZSBKc29uQmVuY2htYXJrIHtcbiAgbmFtZTogc3RyaW5nO1xuICBlcnJvck1lc3NhZ2U/OiBzdHJpbmc7XG4gIGN5Y2xlczogbnVtYmVyO1xuICBoejogbnVtYmVyO1xuICBtZWFuVGltZTogbnVtYmVyO1xuICBtZWRpYW5UaW1lOiBudW1iZXI7XG4gIHN0YW5kYXJkRGV2aWF0aW9uOiBudW1iZXI7XG4gIG1heFRpbWU6IG51bWJlcjtcbiAgbWluVGltZTogbnVtYmVyO1xuICBydW5UaW1lOiBudW1iZXI7XG4gIHRvdGFsVGltZTogbnVtYmVyO1xuICBzYW1wbGVzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIENvbXBhcmVCeSB7XG4gIE1lYW5UaW1lID0gXCJtZWFuVGltZVwiLFxuICBNZWRpYW5UaW1lID0gXCJtZWRpYW5UaW1lXCIsXG4gIFN0YW5kYXJkRGV2aWF0aW9uID0gXCJzdGFuZGFyZERldmlhdGlvblwiLFxuICBNYXhUaW1lID0gXCJtYXhUaW1lXCIsXG4gIE1pblRpbWUgPSBcIm1pblRpbWVcIixcbiAgSHogPSBcImh6XCIsXG4gIFJ1blRpbWUgPSBcInJ1blRpbWVcIixcbiAgQ3ljbGVzID0gXCJjeWNsZXNcIixcbiAgUGVyY2VudCA9IFwicGVyY2VudFwiXG59XG5cbnR5cGUgQmVuY2htYXJrQ29uc3RydWN0b3IgPSAoXG4gIG5hbWU6IHN0cmluZyxcbiAgb3B0aW9uc09yRm46IChQYXJ0aWFsPEJlbmNobWFya09wdGlvbnM+ICYgeyBmbjogQmVuY2htYXJrRnVuY3Rpb24gfSkgfCBCZW5jaG1hcmtGdW5jdGlvbixcbiAgb3B0aW9uczogUGFydGlhbDxCZW5jaG1hcmtPcHRpb25zPlxuKSA9PiBCZW5jaG1hcms7XG5cbmludGVyZmFjZSBCZW5jaG1hcmsge1xuICBTdWl0ZTogdHlwZW9mIFN1aXRlO1xuICByZWFkb25seSB2ZXJzaW9uOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGRlZmF1bHRzOiB7XG4gICAgbWF4VGltZTogbnVtYmVyO1xuICAgIG1pblNhbXBsZXM6IG51bWJlcjtcbiAgfTtcbiAgbmFtZTogc3RyaW5nO1xuICBlcnJvcj86IEJlbmNobWFya0Vycm9yO1xuICBjeWNsZXM6IG51bWJlcjtcbiAgc2FtcGxlczogbnVtYmVyO1xuICBoejogbnVtYmVyO1xuICBtZWFuVGltZTogbnVtYmVyO1xuICBtZWRpYW5UaW1lOiBudW1iZXI7XG4gIHN0YW5kYXJkRGV2aWF0aW9uOiBudW1iZXI7XG4gIG1heFRpbWU6IG51bWJlcjtcbiAgbWluVGltZTogbnVtYmVyO1xuICB0aW1lczogbnVtYmVyW107XG4gIG9wdGlvbnM6IEJlbmNobWFya09wdGlvbnM7XG4gIHN0YW1wOiBudW1iZXI7XG4gIHJ1blRpbWU6IG51bWJlcjtcbiAgdG90YWxUaW1lOiBudW1iZXI7XG4gIGNvbnN0cnVjdG9yOiBCZW5jaG1hcmtDb25zdHJ1Y3RvcjtcbiAgcnVuKCk6IFByb21pc2U8dm9pZD47XG4gIHRvSlNPTigpOiBKc29uQmVuY2htYXJrO1xuICBjb21wYXJlV2l0aChvdGhlcjogQmVuY2htYXJrLCBjb21wYXJlQnk6IENvbXBhcmVCeSk6IG51bWJlcjtcbn1cblxuLy8gaGVscGVyIHRvIGdldCB0aGUgY29ycmVjdCBlcnJvciB0eXBlIGZyb20gYSBub3JtYWwgZXJyb3JcbmZ1bmN0aW9uIGdldEVycm9yKGVycm9yOiBFcnJvciwgbWVzc2FnZTogc3RyaW5nLCB0eXBlOiBFcnJvclR5cGUpOiBCZW5jaG1hcmtFcnJvciB7XG4gIGxldCBiZW5jaG1hcmtFcnJvciA9IG5ldyBFcnJvcnNbdHlwZV0obWVzc2FnZSk7XG4gIGJlbmNobWFya0Vycm9yLnN0YWNrID0gZXJyb3Iuc3RhY2s7XG4gIHJldHVybiBiZW5jaG1hcmtFcnJvcjtcbn1cblxuLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGtub3cgaWYgYSBmdW5jdGlvbiBpcyBhc3luYyBvciBub3RcbmZ1bmN0aW9uIGlzQXN5bmMoZm46IEJlbmNobWFya0Z1bmN0aW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkFzeW5jRnVuY3Rpb25cIjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuQ2FsbGJhY2soXG4gIGluc3RhbmNlOiBhbnksXG4gIGVycm9yVHlwZUlmQW55OiBFcnJvclR5cGUsXG4gIGNhbGxiYWNrPzogKC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZCxcbiAgLi4uYXJnczogYW55W11cbik6IFByb21pc2U8dm9pZCB8IEJlbmNobWFya0Vycm9yPiB7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBjYWxsYmFjay5iaW5kKGluc3RhbmNlKSguLi5hcmdzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGdldEVycm9yKGVycm9yLCBgQmVuY2htYXJrIFxcYCR7aW5zdGFuY2UubmFtZX1cXGAgZmFpbGVkIHRvIHJ1biBcXGAke2NhbGxiYWNrLm5hbWV9XFxgIGNhbGxiYWNrOiAke2Vycm9yLm1lc3NhZ2V9YCwgZXJyb3JUeXBlSWZBbnkpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgYmVuY2htYXJrIGNsYXNzXG5jbGFzcyBCZW5jaG1hcmsgaW1wbGVtZW50cyBCZW5jaG1hcmsge1xuICBzdGF0aWMgU3VpdGU6IHR5cGVvZiBTdWl0ZTtcbiAgc3RhdGljIHJlYWRvbmx5IHZlcnNpb246IHN0cmluZyA9IHZlcnNpb247XG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0czoge1xuICAgIG1heFRpbWU6IG51bWJlcjtcbiAgICBtaW5TYW1wbGVzOiBudW1iZXI7XG4gIH0gPSB7XG4gICAgbWF4VGltZTogNSxcbiAgICBtaW5TYW1wbGVzOiAxXG4gIH07XG5cbiAgbmFtZTogc3RyaW5nO1xuICBlcnJvcj86IEJlbmNobWFya0Vycm9yO1xuICBjeWNsZXM6IG51bWJlciA9IDA7XG4gIHNhbXBsZXM6IG51bWJlciA9IDA7XG4gIGh6OiBudW1iZXIgPSAwO1xuICBtZWFuVGltZTogbnVtYmVyID0gMDtcbiAgbWVkaWFuVGltZTogbnVtYmVyID0gMDtcbiAgc3RhbmRhcmREZXZpYXRpb246IG51bWJlciA9IDA7XG4gIG1heFRpbWU6IG51bWJlciA9IDA7XG4gIG1pblRpbWU6IG51bWJlciA9IDA7XG4gIHRpbWVzOiBudW1iZXJbXSA9IFtdO1xuICBvcHRpb25zOiBCZW5jaG1hcmtPcHRpb25zO1xuICBzdGFtcCE6IG51bWJlcjtcbiAgcnVuVGltZTogbnVtYmVyID0gMDtcbiAgdG90YWxUaW1lOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgb3B0aW9uc09yRm46IChQYXJ0aWFsPEJlbmNobWFya09wdGlvbnM+ICYgeyBmbjogQmVuY2htYXJrRnVuY3Rpb24gfSkgfCBCZW5jaG1hcmtGdW5jdGlvbiwgb3B0aW9uczogUGFydGlhbDxCZW5jaG1hcmtPcHRpb25zPiA9IHt9KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICBsZXQgb3B0cyA9IHtcbiAgICAgIC4uLkJlbmNobWFyay5kZWZhdWx0cyxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9IGFzIEJlbmNobWFya09wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckZuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIG9wdHMuZm4gPSBvcHRpb25zT3JGbjtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0cyA9IHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgLi4ub3B0aW9uc09yRm5cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0cztcbiAgfVxuXG4gIHRvSlNPTigpOiBKc29uQmVuY2htYXJrIHtcbiAgICBjb25zdCB7IG5hbWUsIGVycm9yLCBjeWNsZXMsIGh6LCBydW5UaW1lLCB0b3RhbFRpbWUsIHNhbXBsZXMsIG1lYW5UaW1lLCBtZWRpYW5UaW1lLCBzdGFuZGFyZERldmlhdGlvbiwgbWF4VGltZSwgbWluVGltZSB9ID0gdGhpcztcblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lLFxuICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvciA/IGVycm9yLm1lc3NhZ2UgOiB1bmRlZmluZWQsXG4gICAgICBjeWNsZXMsXG4gICAgICBzYW1wbGVzLFxuICAgICAgaHosXG4gICAgICBtZWFuVGltZSxcbiAgICAgIG1lZGlhblRpbWUsXG4gICAgICBzdGFuZGFyZERldmlhdGlvbixcbiAgICAgIG1heFRpbWUsXG4gICAgICBtaW5UaW1lLFxuICAgICAgcnVuVGltZSxcbiAgICAgIHRvdGFsVGltZVxuICAgIH07XG4gIH1cblxuICBjb21wYXJlV2l0aChvdGhlcjogQmVuY2htYXJrLCBjb21wYXJlQnk6IENvbXBhcmVCeSA9IENvbXBhcmVCeS5QZXJjZW50KTogbnVtYmVyIHtcbiAgICBjb25zdCB7IGVycm9yLCBjeWNsZXMsIGh6LCBtZWFuVGltZSwgbWVkaWFuVGltZSwgc3RhbmRhcmREZXZpYXRpb24sIG1heFRpbWUsIG1pblRpbWUsIHJ1blRpbWUgfSA9IHRoaXM7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAob3RoZXIuZXJyb3IpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIHN3aXRjaCAoY29tcGFyZUJ5KSB7XG4gICAgICBjYXNlIFwibWVhblRpbWVcIjpcbiAgICAgICAgcmV0dXJuIG1lYW5UaW1lIC0gb3RoZXIubWVhblRpbWU7XG4gICAgICBjYXNlIFwibWVkaWFuVGltZVwiOlxuICAgICAgICByZXR1cm4gbWVkaWFuVGltZSAtIG90aGVyLm1lZGlhblRpbWU7XG4gICAgICBjYXNlIFwic3RhbmRhcmREZXZpYXRpb25cIjpcbiAgICAgICAgcmV0dXJuIHN0YW5kYXJkRGV2aWF0aW9uIC0gb3RoZXIuc3RhbmRhcmREZXZpYXRpb247XG4gICAgICBjYXNlIFwibWF4VGltZVwiOlxuICAgICAgICByZXR1cm4gbWF4VGltZSAtIG90aGVyLm1heFRpbWU7XG4gICAgICBjYXNlIFwibWluVGltZVwiOlxuICAgICAgICByZXR1cm4gbWluVGltZSAtIG90aGVyLm1pblRpbWU7XG4gICAgICBjYXNlIFwiaHpcIjpcbiAgICAgICAgcmV0dXJuIGh6IC0gb3RoZXIuaHo7XG4gICAgICBjYXNlIFwicnVuVGltZVwiOlxuICAgICAgICByZXR1cm4gcnVuVGltZSAtIG90aGVyLnJ1blRpbWU7XG4gICAgICBjYXNlIFwiY3ljbGVzXCI6XG4gICAgICAgIHJldHVybiBjeWNsZXMgLSBvdGhlci5jeWNsZXM7XG4gICAgICBjYXNlIFwicGVyY2VudFwiOlxuICAgICAgICByZXR1cm4gTWF0aC50cnVuYygoMTAwIC8gb3RoZXIuaHopICogaHogLSAxMDApO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGNvbXBhcmUgZmllbGQ6ICR7Y29tcGFyZUJ5fWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJ1blNhbXBsZSgpIHtcbiAgICBjb25zdCB7IGJlZm9yZUVhY2gsIGFmdGVyRWFjaCwgZm4gfSA9IHRoaXMub3B0aW9ucztcbiAgICBsZXQgc2FtcGxlTWF4VGltZSA9IDEwMDA7XG4gICAgbGV0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgd2hpbGUgKHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lIDwgc2FtcGxlTWF4VGltZSkge1xuICAgICAgY29uc3Qgc3RhcnRDeWNsZVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIHRoaXMuY3ljbGVzKys7XG4gICAgICBjb25zdCBiZWZvcmVFYWNoRXJyb3IgPSBhd2FpdCBydW5DYWxsYmFjayh0aGlzLCBcImJlZm9yZUVhY2hFcnJvclwiLCBiZWZvcmVFYWNoKTtcbiAgICAgIGlmIChiZWZvcmVFYWNoRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgYmVmb3JlRWFjaEVycm9yO1xuICAgICAgfVxuXG4gICAgICBsZXQgdGltZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0FzeW5jKGZuKSkge1xuICAgICAgICAgIGxldCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgIGF3YWl0IGZuKCk7XG4gICAgICAgICAgdGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgZm4oKTtcbiAgICAgICAgICB0aW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZ2V0RXJyb3IoZXJyb3IsIGBCZW5jaG1hcmsgXFxgJHt0aGlzLm5hbWV9XFxgIGZhaWxlZCB0byBydW4gXFxgZm5cXGA6ICR7ZXJyb3IubWVzc2FnZX1gLCBcIlJ1bkVycm9yXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRpbWVzLnB1c2godGltZSk7XG4gICAgICB0aGlzLnJ1blRpbWUgKz0gdGltZTtcblxuICAgICAgY29uc3QgYWZ0ZXJFYWNoRXJyb3IgPSBhd2FpdCBydW5DYWxsYmFjayh0aGlzLCBcImFmdGVyRWFjaEVycm9yXCIsIGFmdGVyRWFjaCk7XG4gICAgICBpZiAoYWZ0ZXJFYWNoRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgYWZ0ZXJFYWNoRXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG90YWxUaW1lICs9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRDeWNsZVRpbWU7XG4gICAgfVxuICB9XG5cbiAgLy8gUnVuIHRoZSBiZW5jaG1hcmsuXG4gIGFzeW5jIHJ1bigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLnN0YW1wID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgeyBtYXhUaW1lLCBtaW5TYW1wbGVzLCBvbkNvbXBsZXRlLCBvblN0YXJ0LCBvbkVycm9yLCBmbiB9ID0gdGhpcy5vcHRpb25zO1xuICAgIGxldCBtYXhUaW1lSW5NaWxsaXNlY29uZHMgPSBtYXhUaW1lICogMTAwMDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBvblN0YXJ0RXJyb3IgPSBhd2FpdCBydW5DYWxsYmFjayh0aGlzLCBcIlN0YXJ0RXJyb3JcIiwgb25TdGFydCk7XG4gICAgICBpZiAob25TdGFydEVycm9yKSB7XG4gICAgICAgIHRocm93IG9uU3RhcnRFcnJvcjtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHRoaXMuc2FtcGxlcyA8IG1pblNhbXBsZXMgfHwgdGhpcy50b3RhbFRpbWUgPCBtYXhUaW1lSW5NaWxsaXNlY29uZHMpIHtcbiAgICAgICAgdGhpcy5zYW1wbGVzKys7XG4gICAgICAgIGF3YWl0IHRoaXMucnVuU2FtcGxlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgaHogYnkgc2Vjb25kXG4gICAgICB0aGlzLmh6ID0gdGhpcy5jeWNsZXMgLyAodGhpcy5ydW5UaW1lIC8gMTAwMCk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgbWVhbiwgbWVkaWFuLCBtYXJnaW4gb2YgZXJyb3IsIGFuZCBzdGFuZGFyZCBkZXZpYXRpb24uXG4gICAgICB0aGlzLm1lYW5UaW1lID0gdGhpcy5ydW5UaW1lIC8gdGhpcy50aW1lcy5sZW5ndGg7XG4gICAgICB0aGlzLm1lZGlhblRpbWUgPSB0aGlzLnRpbWVzLnNvcnQoKGEsIGIpID0+IGEgLSBiKVtNYXRoLmZsb29yKHRoaXMudGltZXMubGVuZ3RoIC8gMildIHx8IDA7XG4gICAgICB0aGlzLnN0YW5kYXJkRGV2aWF0aW9uID0gTWF0aC5zcXJ0KHRoaXMudGltZXMubWFwKCh0KSA9PiBNYXRoLnBvdyh0IC0gdGhpcy5tZWFuVGltZSwgMikpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gdGhpcy50aW1lcy5sZW5ndGgpO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIG1heCwgbWluLCBhbmQgYXZlcmFnZSB0aW1lcy5cbiAgICAgIHRoaXMubWF4VGltZSA9IHRoaXMudGltZXMucmVkdWNlKChtYXgsIHRpbWUpID0+IE1hdGgubWF4KG1heCwgdGltZSksIDApO1xuICAgICAgdGhpcy5taW5UaW1lID0gdGhpcy50aW1lcy5yZWR1Y2UoKG1pbiwgdGltZSkgPT4gTWF0aC5taW4obWluLCB0aW1lKSwgSW5maW5pdHkpO1xuXG4gICAgICBjb25zdCBvbkNvbXBsZXRlRXJyb3IgPSBhd2FpdCBydW5DYWxsYmFjayh0aGlzLCBcIkNvbXBsZXRlRXJyb3JcIiwgb25Db21wbGV0ZSk7XG4gICAgICBpZiAob25Db21wbGV0ZUVycm9yKSB7XG4gICAgICAgIHRocm93IG9uQ29tcGxldGVFcnJvcjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuXG4gICAgICBjb25zdCBvbkVycm9yRXJyb3IgPSBhd2FpdCBydW5DYWxsYmFjayh0aGlzLCBcIkZhdGFsRXJyb3JcIiwgb25FcnJvciwgZXJyb3IpO1xuICAgICAgaWYgKG9uRXJyb3JFcnJvcikge1xuICAgICAgICB0aHJvdyBvbkVycm9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vKioqIENsYXNzIFN1aXRlICoqKi8vXG50eXBlIFN1aXRlT3B0aW9ucyA9IHtcbiAgLy8gVGhlIG1heGltdW0gdGltZSBpbiBzZWNvbmRzIHRoYXQgYSBiZW5jaG1hcmsgY2FuIHRha2UuXG4gIG1heFRpbWU6IG51bWJlcjtcbiAgLy8gVGhlIG1pbmltdW0gbnVtYmVyIG9mIHNhbXBsZXMgdGhhdCBtdXN0IGJlIHRha2VuLlxuICBtaW5TYW1wbGVzOiBudW1iZXI7XG4gIC8vIEEgZnVuY3Rpb24gdG8gYmUgcnVuIG9uY2UgYmVmb3JlIGVhY2ggYmVuY2htYXJrIHJ1blxuICBiZWZvcmVFYWNoPzogKGJlbmNobWFyazogQmVuY2htYXJrLCBpOiBudW1iZXIpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkO1xuICAvLyBBIGZ1bmN0aW9uIHRvIGJlIHJ1biBvbmNlIGFmdGVyIGVhY2ggYmVuY2htYXJrIHJ1blxuICBhZnRlckVhY2g/OiAoYmVuY2htYXJrOiBCZW5jaG1hcmssIGk6IG51bWJlcikgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XG4gIC8vIEEgZnVuY3Rpb24gdG8gYmUgcnVuIG9uY2UgYWZ0ZXIgdGhlIHN1aXRlIGNvbXBsZXRlc1xuICBvbkNvbXBsZXRlPzogKCkgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XG4gIC8vIEEgZnVuY3Rpb24gdG8gYmUgcnVuIG9uY2UgYmVmb3JlIHRoZSBzdWl0ZSBzdGFydHNcbiAgb25TdGFydD86ICgpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkO1xuICAvLyBBIGZ1bmN0aW9uIHRvIGJlIHJ1biBpZiBhbiBlcnJvciBvY2N1cnMuXG4gIG9uRXJyb3I/OiAoZXJyb3I6IEJlbmNobWFya0Vycm9yKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcbn07XG5cbmludGVyZmFjZSBKc29uU3VpdGUge1xuICBuYW1lOiBzdHJpbmc7XG4gIGVycm9yTWVzc2FnZT86IHN0cmluZztcbiAgcnVuVGltZTogbnVtYmVyO1xuICB0b3RhbFRpbWU6IG51bWJlcjtcbiAgcGFzc2VkOiBib29sZWFuO1xuICBiZW5jaG1hcmtzOiBKc29uQmVuY2htYXJrW107XG59XG5cbnR5cGUgU3VpdGVDb25zdHJ1Y3RvciA9IChuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPFN1aXRlT3B0aW9ucz4pID0+IFN1aXRlO1xuXG5pbnRlcmZhY2UgU3VpdGUge1xuICByZWFkb25seSBkZWZhdWx0czoge1xuICAgIG1heFRpbWU6IG51bWJlcjtcbiAgICBtaW5TYW1wbGVzOiBudW1iZXI7XG4gIH07XG5cbiAgbmFtZTogc3RyaW5nO1xuICBlcnJvcj86IEJlbmNobWFya0Vycm9yO1xuICBvcHRpb25zOiBTdWl0ZU9wdGlvbnM7XG4gIHN0YW1wOiBudW1iZXI7XG4gIHJ1blRpbWU6IG51bWJlcjtcbiAgdG90YWxUaW1lOiBudW1iZXI7XG4gIGJlbmNobWFya3M6IEJlbmNobWFya1tdO1xuXG4gIGNvbnN0cnVjdG9yOiBTdWl0ZUNvbnN0cnVjdG9yO1xuICBhZGQobmFtZTogc3RyaW5nLCBvcHRpb25zT3JGbjogKFBhcnRpYWw8QmVuY2htYXJrT3B0aW9ucz4gJiB7IGZuOiBCZW5jaG1hcmtGdW5jdGlvbiB9KSB8IEJlbmNobWFya0Z1bmN0aW9uLCBvcHRpb25zOiBQYXJ0aWFsPEJlbmNobWFya09wdGlvbnM+KTogQmVuY2htYXJrO1xuICB0b0pTT04oKTogSnNvblN1aXRlO1xuICBydW4oKTogUHJvbWlzZTx2b2lkPjtcblxuICBnZXRTb3J0ZWRCZW5jaG1hcmtzKHNvcnRlZEJ5OiBDb21wYXJlQnkpOiBCZW5jaG1hcmtbXTtcbiAgZ2V0RmFzdGVzdChzb3J0ZWRCeTogQ29tcGFyZUJ5KTogQmVuY2htYXJrO1xuICBnZXRTbG93ZXN0KHNvcnRlZEJ5OiBDb21wYXJlQnkpOiBCZW5jaG1hcms7XG4gIGNvbXBhcmVGYXN0ZXN0V2l0aExvd2VzdChjb21wYXJlQnk6IENvbXBhcmVCeSk6IHsgZmFzdGVzdDogQmVuY2htYXJrOyBzbG93ZXN0OiBCZW5jaG1hcms7IGJ5OiBudW1iZXIgfTtcbn1cblxuY2xhc3MgU3VpdGUgaW1wbGVtZW50cyBTdWl0ZSB7XG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0cyA9IHtcbiAgICBtYXhUaW1lOiA1LFxuICAgIG1pblNhbXBsZXM6IDFcbiAgfTtcblxuICBuYW1lOiBzdHJpbmc7XG4gIGVycm9yPzogQmVuY2htYXJrRXJyb3I7XG4gIG9wdGlvbnM6IFN1aXRlT3B0aW9ucztcbiAgc3RhbXAhOiBudW1iZXI7XG4gIHJ1blRpbWU6IG51bWJlciA9IDA7XG4gIHRvdGFsVGltZTogbnVtYmVyID0gMDtcbiAgYmVuY2htYXJrczogQmVuY2htYXJrW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIG9wdGlvbnM6IFBhcnRpYWw8U3VpdGVPcHRpb25zPiA9IHt9KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAuLi5TdWl0ZS5kZWZhdWx0cyxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdG9KU09OKCk6IEpzb25TdWl0ZSB7XG4gICAgY29uc3QgeyBlcnJvciwgbmFtZSwgcnVuVGltZSwgdG90YWxUaW1lIH0gPSB0aGlzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUsXG4gICAgICBlcnJvck1lc3NhZ2U6IGVycm9yID8gZXJyb3IubWVzc2FnZSA6IHVuZGVmaW5lZCxcbiAgICAgIHJ1blRpbWUsXG4gICAgICB0b3RhbFRpbWUsXG4gICAgICBwYXNzZWQ6ICFlcnJvcixcbiAgICAgIGJlbmNobWFya3M6IHRoaXMuYmVuY2htYXJrcy5tYXAoKGJlbmNobWFyaykgPT4gYmVuY2htYXJrLnRvSlNPTigpKVxuICAgIH07XG4gIH1cblxuICBhZGQoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIG9wdGlvbnNPckZuOiAoUGFydGlhbDxCZW5jaG1hcmtPcHRpb25zPiAmIHsgZm46IEJlbmNobWFya0Z1bmN0aW9uIH0pIHwgQmVuY2htYXJrRnVuY3Rpb24sXG4gICAgb3B0aW9uczogUGFydGlhbDxCZW5jaG1hcmtPcHRpb25zPiA9IHt9XG4gICk6IEJlbmNobWFyayB7XG4gICAgbGV0IG9wdHMgPSB7XG4gICAgICAuLi57XG4gICAgICAgIG1pblNhbXBsZXM6IHRoaXMub3B0aW9ucy5taW5TYW1wbGVzLFxuICAgICAgICBtYXhUaW1lOiB0aGlzLm9wdGlvbnMubWF4VGltZVxuICAgICAgfSxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9IGFzIEJlbmNobWFya09wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckZuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIG9wdHMuZm4gPSBvcHRpb25zT3JGbjtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0cyA9IHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgLi4ub3B0aW9uc09yRm5cbiAgICAgIH07XG4gICAgfVxuICAgIGxldCBiZW5jaG1hcmsgPSBuZXcgQmVuY2htYXJrKG5hbWUsIG9wdHMpO1xuICAgIHRoaXMuYmVuY2htYXJrcy5wdXNoKGJlbmNobWFyayk7XG4gICAgcmV0dXJuIGJlbmNobWFyaztcbiAgfVxuXG4gIGFzeW5jIHJ1bigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLnN0YW1wID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgeyBiZWZvcmVFYWNoLCBhZnRlckVhY2gsIG9uQ29tcGxldGUsIG9uU3RhcnQsIG9uRXJyb3IgfSA9IHRoaXMub3B0aW9ucztcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBvblN0YXJ0RXJyb3IgPSBhd2FpdCBydW5DYWxsYmFjayh0aGlzLCBcIlN0YXJ0RXJyb3JcIiwgb25TdGFydCk7XG4gICAgICBpZiAob25TdGFydEVycm9yKSB7XG4gICAgICAgIHRocm93IG9uU3RhcnRFcnJvcjtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmJlbmNobWFya3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxldCBiZW5jaG1hcmsgPSB0aGlzLmJlbmNobWFya3NbaV07XG4gICAgICAgIGNvbnN0IG9uYmVmb3JlRWFjaEVycm9yID0gYXdhaXQgcnVuQ2FsbGJhY2sodGhpcywgXCJiZWZvcmVFYWNoRXJyb3JcIiwgYmVmb3JlRWFjaCwgYmVuY2htYXJrLCBpKTtcbiAgICAgICAgaWYgKG9uYmVmb3JlRWFjaEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgb25iZWZvcmVFYWNoRXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBiZW5jaG1hcmsucnVuKCk7XG4gICAgICAgIHRoaXMucnVuVGltZSArPSBiZW5jaG1hcmsucnVuVGltZTtcbiAgICAgICAgdGhpcy50b3RhbFRpbWUgKz0gYmVuY2htYXJrLnRvdGFsVGltZTtcblxuICAgICAgICBjb25zdCBvbmFmdGVyRWFjaEVycm9yID0gYXdhaXQgcnVuQ2FsbGJhY2sodGhpcywgXCJhZnRlckVhY2hFcnJvclwiLCBhZnRlckVhY2gsIGJlbmNobWFyaywgaSk7XG4gICAgICAgIGlmIChvbmFmdGVyRWFjaEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgb25hZnRlckVhY2hFcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBvbkNvbXBsZXRlRXJyb3IgPSBhd2FpdCBydW5DYWxsYmFjayh0aGlzLCBcIkNvbXBsZXRlRXJyb3JcIiwgb25Db21wbGV0ZSk7XG4gICAgICBpZiAob25Db21wbGV0ZUVycm9yKSB7XG4gICAgICAgIHRocm93IG9uQ29tcGxldGVFcnJvcjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuXG4gICAgICBjb25zdCBvbkVycm9yRXJyb3IgPSBhd2FpdCBydW5DYWxsYmFjayh0aGlzLCBcIkZhdGFsRXJyb3JcIiwgb25FcnJvciwgZXJyb3IpO1xuICAgICAgaWYgKG9uRXJyb3JFcnJvcikge1xuICAgICAgICB0aHJvdyBvbkVycm9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U29ydGVkQmVuY2htYXJrc0J5KHNvcnRCeTogQ29tcGFyZUJ5KTogQmVuY2htYXJrW10ge1xuICAgIGNvbnN0IGJlbmNobWFya3MgPSB0aGlzLmJlbmNobWFya3Muc2xpY2UoKTtcbiAgICBjb25zdCBzb3J0ZWRCZW5jaG1hcmtzID0gYmVuY2htYXJrcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0ID0gYi5jb21wYXJlV2l0aChhLCBzb3J0QnkpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA+IDAgPyAxIDogcmVzdWx0IDwgMCA/IC0xIDogMDtcbiAgICB9KTtcblxuICAgIHJldHVybiBzb3J0ZWRCZW5jaG1hcmtzO1xuICB9XG5cbiAgZ2V0RmFzdGVzdChzb3J0Qnk6IENvbXBhcmVCeSk6IEJlbmNobWFyayB7XG4gICAgY29uc3Qgc29ydGVkQmVuY2htYXJrcyA9IHRoaXMuZ2V0U29ydGVkQmVuY2htYXJrc0J5KHNvcnRCeSk7XG4gICAgcmV0dXJuIHNvcnRlZEJlbmNobWFya3NbMF07XG4gIH1cblxuICBnZXRTbG93ZXN0KHNvcnRCeTogQ29tcGFyZUJ5KTogQmVuY2htYXJrIHtcbiAgICBjb25zdCBzb3J0ZWRCZW5jaG1hcmtzID0gdGhpcy5nZXRTb3J0ZWRCZW5jaG1hcmtzQnkoc29ydEJ5KTtcbiAgICByZXR1cm4gc29ydGVkQmVuY2htYXJrc1tzb3J0ZWRCZW5jaG1hcmtzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgY29tcGFyZUZhc3Rlc3RXaXRoTG93ZXN0KGNvbXBhcmVCeTogQ29tcGFyZUJ5KSB7XG4gICAgY29uc3QgZmFzdGVzdCA9IHRoaXMuZ2V0RmFzdGVzdChjb21wYXJlQnkpO1xuICAgIGNvbnN0IHNsb3dlc3QgPSB0aGlzLmdldFNsb3dlc3QoY29tcGFyZUJ5KTtcblxuICAgIHJldHVybiB7XG4gICAgICBmYXN0ZXN0LFxuICAgICAgc2xvd2VzdCxcbiAgICAgIGJ5OiBmYXN0ZXN0LmNvbXBhcmVXaXRoKHNsb3dlc3QsIGNvbXBhcmVCeSlcbiAgICB9O1xuICB9XG59XG5cbkJlbmNobWFyay5TdWl0ZSA9IFN1aXRlO1xuXG4vLyBFeHBvcnQgdGhlIEJlbmNobWFyayBjbGFzcy5cbmV4cG9ydCBkZWZhdWx0IEJlbmNobWFyaztcbiJdfQ==